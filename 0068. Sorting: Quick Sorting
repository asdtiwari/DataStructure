/* Program to sort the elements of an array using quick sort technique
Quick sort posseses a very good average-case behaviour among all the sorting technique.
This is developed by C.A.R. Hoare */

# include <stdio.h>

void swap (int * a, int * b)
{
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

void quick_sort (int * array, int lowest, int highest)
{
    int low = lowest;
    int high = highest;
    int key = *(array + ((lowest + highest) / 2));
    
    while (low <= high)
    {
        while (key > *(array + low))
            low++;
            
        while (key < *(array + high))
            high--;
        
        if (low <= high)
        {
            swap((array + low), (array + high));
            low++;
            high--;
        }
    }
    
    /* Here we are able to out of above while loop iff low is greater than high. 
    So making the partioned array we are opting the its's lower bound as lowest 
    and upper bound as high and so on */
    
    if(low < highest)
        quick_sort(array, low, highest);
    
    if (lowest < high)
        quick_sort(array, lowest, high);
}

void write (int *array, int size)
{
    printf("\n Enter %d elements in array \n", size);
    
    for(int i = 0; i < size; i++)
        scanf("%d", (array+i));
    
    printf(" Elements inserted successfullly \n");
}

void read (int *array, int size)
{
    printf("\n Elements of Array \n");
    
    for(int i = 0; i < size; i++)
        printf(" %d ", *(array + i));
        
    printf("\n All elements printed \n");
}

// Testing
void main ()
{
	# define max 100
	int array[max];
	
	int size;
	printf("\n Enter the size of array (<= 100): ");
	scanf("%d", &size);
	
	write(&array[0], size);
	read(&array[0], size);

	quick_sort(&array[0], 0, size - 1);
	printf("\n Sorted Array \n");
	read(&array[0], size);
}
